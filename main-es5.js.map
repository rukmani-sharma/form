{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","emailFormControl","required","email","events","shouldRun","some","h","test","window","location","host","accounts","value","viewValue","types","myControl","options","list","listing","state","statelist","city","citylist","zone","zonelist","territory","territorylist","district","districtlist","locality","localitylist","society","societylist","block","blocklist","$event","console","log","onCountrySelected","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {Country} from '@angular-material-extensions/select-country';\n\n\ninterface account {\n  value: string;\n  viewValue: string;\n}\n\n\ninterface type {\n  value: string;\n  viewValue: string;\n}\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'form';\n\n  onCountrySelected($event: Country) {\n    console.log($event);\n  }\n\n  emailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.email,\n  ]);\n\n  \n  events: string[] = [];\n  opened: boolean;\n\n  shouldRun = [/(^|\\.)plnkr\\.co$/, /(^|\\.)stackblitz\\.io$/].some(h => h.test(window.location.host));\n\n\n\n  accounts: account[] = [\n    {value: 'customer-0', viewValue: 'Customer'},\n    {value: 'retailer-1', viewValue: 'Retailer'},\n    {value: 'distributor-2', viewValue: 'Distributor'}\n  ];\n\n \n\n  types: type[] = [\n    {value: 'typ-0', viewValue: 'Current'},\n    {value: 'typ-1', viewValue: 'Saving'},\n  ];\n\n\n  \n  myControl = new FormControl();\n  options: string[] = ['121001', '121002', '121003'];\n\n\n  list = new FormControl();\n  listing: string[] = ['India', 'Australia', 'Nepal'];\n\n  state = new FormControl();\n  statelist: string[] = ['Haryana', 'Punjab', 'Uttrakhand'];\n\n  city = new FormControl();\n  citylist: string[] = ['Faridabad', 'Noida', 'Ghaziabad'];\n\n  zone = new FormControl();\n  zonelist: string[] = ['Zone 1', 'Zone 2', 'Zone 3'];\n\n  territory = new FormControl();\n  territorylist: string[] = ['Territory 1', 'Territory 2', 'Territory 3'];\n\n  district = new FormControl();\n  districtlist: string[] = ['District 1', 'District 2', 'District 3'];\n\n  locality = new FormControl();\n  localitylist: string[] = ['Locality 1', 'Locality 2', 'Locality 3'];\n\n  society = new FormControl();\n  societylist: string[] = ['Society 1', 'Society 2', 'Society 3'];\n\n  block = new FormControl();\n  blocklist: string[] = ['Block 1', 'Block 2', 'Block 3'];\n\n  }\n","<mat-sidenav-container class=\"example-container\" >\n  <mat-sidenav #sidenav mode=\"side\" [(opened)]=\"opened\" (opened)=\"events.push('open!')\"\n               (closed)=\"events.push('close!')\">\n    Sidenav content\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n\n    <mat-toolbar  class=\"mat-elevation-z6\">\n  <button mat-icon-button class=\"slide-btn\" (click)=\"sidenav.toggle()\">\n   <span class=\"material-icons\">menu</span>\n    </button>  <img src=\"/assets/images/Dial-ERP-Logo.svg\" class=\"logo\">\n <span class=\"example-spacer\"></span>\n\n <div fxShow=\"true\" fxHide.lt-md layout-align=\"end\">\n <button mat-button [matMenuTriggerFor]=\"menu\">Admin <span class=\"material-icons expand\">expand_more</span></button>\n<mat-menu #menu=\"matMenu\">\n  <button mat-menu-item>Logout</button>\n</mat-menu>\n\n   </div>\n</mat-toolbar>\n<div class=\"container\">\n    <div class=\"row\">\n       <div class=\"col-md-6 col-12 offset-3\">\n        <div class=\"form-add\">\n            <h4 class=\"heading\">Basic Details</h4>\n            \n\n            <form class=\"example-form\">\n\n           <mat-form-field class=\"example-full-width\">\n    <mat-label>Business Name</mat-label>\n    <input matInput [formControl]=\"emailFormControl\" required\n    >\n    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n      Please enter a valid Business Name\n    </mat-error>\n    <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n      Business name is <strong>required</strong>\n    </mat-error>\n  </mat-form-field>\n\n\n\n              <mat-form-field>\n              <mat-label>Under Account Group</mat-label>\n              <mat-select required>\n                <mat-option *ngFor=\"let account of accounts\" [value]=\"account.value\">\n                  {{account.viewValue}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n               <mat-label>Alias Name</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n               <mat-label>Erp Id</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n\n\n            <h4 class=\"heading\">Address Details</h4>\n\n             <mat-form-field class=\"example-full-width\">\n              <input type=\"text\"\n                     placeholder=\"Pincode\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"myControl\"\n                     [matAutocomplete]=\"auto\">\n              <mat-autocomplete #auto=\"matAutocomplete\">\n                <mat-option *ngFor=\"let option of options\" [value]=\"option\">\n                  {{option}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n            <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Country\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"list\"\n                     [matAutocomplete]=\"autoTest\" required=\"\">\n              <mat-autocomplete #autoTest=\"matAutocomplete\">\n                <mat-option *ngFor=\"let country of listing\" [value]=\"country\">\n                  {{country}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n           <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"State\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"list\"\n                     [matAutocomplete]=\"autoState\" required=\"\">\n              <mat-autocomplete #autoState=\"matAutocomplete\">\n                <mat-option *ngFor=\"let state of statelist\" [value]=\"state\">\n                  {{state}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n          \n             <mat-form-field class=\"example-full-width\">\n               <mat-label>Address Line 1</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n               <mat-label>Address Line 2</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n\n\n           <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"City\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"list\"\n                     [matAutocomplete]=\"autoCity\">\n              <mat-autocomplete #autoCity=\"matAutocomplete\">\n                <mat-option *ngFor=\"let city of citylist\" [value]=\"city\">\n                  {{city}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n            <mat-form-field class=\"example-full-width\">\n               <mat-label>Landmark</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n            <h4 class=\"heading\">Area Planner</h4>\n               <mat-form-field class=\"example-full-width\">\n              <input type=\"text\"\n                     placeholder=\"Pincode\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"myControl\"\n                     [matAutocomplete]=\"auto\" required=\"\">\n              <mat-autocomplete #auto=\"matAutocomplete\">\n                <mat-option *ngFor=\"let option of options\" [value]=\"option\">\n                  {{option}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Zone\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"zone\"\n                     [matAutocomplete]=\"autoZone\" required=\"\">\n              <mat-autocomplete #autoZone=\"matAutocomplete\">\n                <mat-option *ngFor=\"let zone of zonelist\" [value]=\"zone\">\n                  {{zone}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n\n              <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Territory\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"territory\"\n                     [matAutocomplete]=\"autoTerritory\" required=\"\">\n              <mat-autocomplete #autoTerritory=\"matAutocomplete\">\n                <mat-option *ngFor=\"let territory of territorylist\" [value]=\"territory\">\n                  {{territory}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"District\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"district\"\n                     [matAutocomplete]=\"autoDistrict\" required=\"\">\n              <mat-autocomplete #autoDistrict=\"matAutocomplete\">\n                <mat-option *ngFor=\"let district of districtlist\" [value]=\"district\">\n                  {{district}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n                <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Locality\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"locality\"\n                     [matAutocomplete]=\"autoLocality\">\n              <mat-autocomplete #autoLocality=\"matAutocomplete\">\n                <mat-option *ngFor=\"let locality of localitylist\" [value]=\"locality\">\n                  {{locality}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n\n             <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Society\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"society\"\n                     [matAutocomplete]=\"autoSociety\">\n              <mat-autocomplete #autoSociety=\"matAutocomplete\">\n                <mat-option *ngFor=\"let society of societylist\" [value]=\"society\">\n                  {{society}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n              <input type=\"text\" \n                     placeholder=\"Block\"\n                     aria-label=\"Number\"\n                     matInput\n                     [formControl]=\"block\"\n                     [matAutocomplete]=\"autoBlock\">\n              <mat-autocomplete #autoBlock=\"matAutocomplete\">\n                <mat-option *ngFor=\"let block of blocklist\" [value]=\"block\">\n                  {{block}}\n                </mat-option>\n              </mat-autocomplete>\n            </mat-form-field>\n\n\n            <mat-form-field class=\"example-full-width\">\n               <mat-label>Bldg Name/Bldg Number</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n\n            <h4 class=\"heading\">Contact Details</h4>\n\n           <mat-form-field class=\"example-full-width\">\n              <mat-label>Primary Contact Name</mat-label>\n              <input matInput [formControl]=\"emailFormControl\" required\n              >\n              <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n                Please enter a valid Primary Contact Name\n              </mat-error>\n              <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n                Primary Contact Name is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n\n\n\n              <div class=\"row\">\n                  <div class=\"col-md-6 col-6\">\n                    <mat-select-country  \n                    (onCountrySelected)=\"onCountrySelected($event)\">\n                  </mat-select-country>\n                  </div>\n\n                  <div class=\"col-md-6 col-6\">\n                      <mat-form-field class=\"example-full-width\">\n                        <mat-label>Primary Contact Mobile </mat-label>\n                        <input matInput [formControl]=\"emailFormControl\" required\n                        >\n                        <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n                          Please enter a valid Primary Contact Mobile \n                        </mat-error>\n                        <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n                          Primary Contact Mobile is <strong>required</strong>\n                        </mat-error>\n                      </mat-form-field>\n                  </div>\n              </div>\n            \n\n              <mat-form-field class=\"example-full-width\">\n               <mat-label>Primary Contact Email</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n              <mat-form-field class=\"example-full-width\">\n               <mat-label>Primary Contact Designation</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n\n             <mat-form-field>\n                <mat-label>Primary Contact DOB</mat-label>\n                <input matInput [matDatepicker]=\"picker\">\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n              </mat-form-field>\n\n                <mat-form-field>\n                <mat-label>Primary Contact DOA</mat-label>\n                <input matInput [matDatepicker]=\"picker\">\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n              </mat-form-field>\n\n\n            <h4 class=\"heading\">Bank Details</h4>\n\n             <mat-form-field class=\"example-full-width\">\n               <mat-label>Business Name In Bank</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n               <mat-label>Alias Name In Bank</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n               <mat-label>Bank Account No.</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n               <mat-label>Bank Name</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n               <mat-label>IFSC Code</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n                <mat-form-field>\n              <mat-label>Account Type</mat-label>\n              <mat-select>\n                <mat-option *ngFor=\"let type of types\" [value]=\"type.value\">\n                  {{type.viewValue}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n\n               <mat-form-field class=\"example-full-width\">\n               <mat-label>Branch Name</mat-label>\n                <input matInput>\n              </mat-form-field>\n\n              <div class=\"example-button-row\">\n                <button mat-flat-button class=\"submit-btn\">Submit</button>\n              </div>\n\n            </form>\n\n\n\n         </div>\n        </div>\n    </div>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatSelectCountryModule } from '@angular-material-extensions/select-country';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSidenavModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectCountryModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n\n\n  ],\n  providers: [ MatNativeDateModule,],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}